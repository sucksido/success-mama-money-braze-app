"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[3536],{3536:(N,m,p)=>{p.r(m),p.d(m,{default:()=>T});var f=p(2437),v=p(508),j=p(4575),e=p(1160),P=p(3118),w=p(2687),S=p(8457),d=p(9123),k=p(2767);let D=(()=>{class g{constructor(n,i,h,r,o,u,t,a,s,c){this.hn=n,this.cn=i,this.fn=h,this.dn=o,this.bn=u,this.wt=t,this.yn=a,this.gn=s,this.u=c,this.hn=n,this.cn=i,this.fn=h,this.wn=r+"/safari/"+i,this.dn=o||"/service-worker.js",this.bn=u,this.wt=t,this.yn=a||!1,this.gn=s||!1,this.u=c,this.vn=d.A.kn(),this.Pn=d.A.Dn()}Sn(){return this.gn}An(n,i,h,r,o){n.unsubscribe().then(u=>{u?this.jn(i,h,r,o):(e.A.j.error("Failed to unsubscribe device from push."),"function"==typeof o&&o(!1))}).catch(u=>{e.A.j.error("Push unsubscription error: "+u),"function"==typeof o&&o(!1)})}Un(n,i,h){const r=(s=>{if("string"==typeof s)return s;if(0!==s.endpoint.indexOf("https://android.googleapis.com/gcm/send"))return s.endpoint;let c=s.endpoint;const y=s;return y.Wn&&-1===s.endpoint.indexOf(y.Wn)&&(c=s.endpoint+"/"+y.Wn),c})(n);let o=null,u=null;const t=n;if(null!=t.getKey)try{const s=Array.from(new Uint8Array(t.getKey("p256dh"))),c=Array.from(new Uint8Array(t.getKey("auth")));o=btoa(String.fromCharCode.apply(null,s)),u=btoa(String.fromCharCode.apply(null,c))}catch(s){if("invalid arguments"!==(0,k.u)(s))throw s}const a=(s=>{let c;return s.options&&(c=s.options.applicationServerKey)&&c.byteLength&&c.byteLength>0?btoa(String.fromCharCode.apply(null,Array.from(new Uint8Array(c)))).replace(/\+/g,"-").replace(/\//g,"_"):null})(t);this.hn&&this.hn._n(r,i,o,u,a),r&&"function"==typeof h&&h(r,o,u)}xn(){this.hn&&this.hn.Nn(!0)}Tn(n,i){this.hn&&this.hn.Nn(!1),e.A.j.info(n),"function"==typeof i&&i(!1)}zn(n,i,h,r){var o;if("default"===i.permission)try{window.safari.pushNotification.requestPermission(this.wn,n,{api_key:this.cn,device_id:(null===(o=this.fn)||void 0===o?void 0:o.ce().id)||""},u=>{"granted"===u.permission&&this.hn&&this.hn.setPushNotificationSubscriptionType(w.A.NotificationSubscriptionTypes.OPTED_IN),this.zn(n,u,h,r)})}catch(u){this.Tn("Could not request permission for push: "+u,r)}else"denied"===i.permission?this.Tn("The user has blocked notifications from this site, or Safari push is not configured in the Braze dashboard.",r):"granted"===i.permission&&(e.A.j.info("Device successfully subscribed to push."),this.Un(i.deviceToken,new Date,h))}requestPermission(n,i,h){const r=t=>{switch(t){case"granted":return void("function"==typeof n&&n());case"default":return void("function"==typeof i&&i());case"denied":return void("function"==typeof h&&h());default:e.A.j.error("Received unexpected permission result "+t)}};let o=!1;const u=window.Notification.requestPermission(t=>{o&&r(t)});u?u.then(t=>{r(t)}):o=!0}jn(n,i,h,r){const o={userVisibleOnly:!0};null!=i&&(o.applicationServerKey=i),n.pushManager.subscribe(o).then(u=>{e.A.j.info("Device successfully subscribed to push."),this.Un(u,new Date,h)}).catch(u=>{d.A.isPushBlocked()?(e.A.j.info("Permission for push notifications was denied."),"function"==typeof r&&r(!1)):(e.A.j.error("Push subscription failed: "+u),"function"==typeof r&&r(!0))})}In(){return this.yn?navigator.serviceWorker.getRegistration(this.dn):navigator.serviceWorker.register(this.dn).then(()=>navigator.serviceWorker.ready.then(n=>(n&&"function"==typeof n.update&&n.update().catch(i=>{e.A.j.info("ServiceWorker update failed: "+i)}),n)))}Vn(n){this.yn||(n.unregister(),e.A.j.info("Service worker successfully unregistered."))}subscribe(n,i){if(!d.A.isPushSupported())return e.A.j.info(g.qn),void("function"==typeof i&&i(!1));if(this.vn){if(!this.yn&&null!=window.location){let t=this.dn;-1===t.indexOf(window.location.host)&&(t=window.location.host+t),-1===t.indexOf(window.location.protocol)&&(t=window.location.protocol+"//"+t);const a=t.substr(0,t.lastIndexOf("/")+1);if(0!==S.uD.Cn().indexOf(a))return e.A.j.error("Cannot subscribe to push from a path higher than the service worker location (tried to subscribe from "+window.location.pathname+" but service worker is at "+t+")"),void("function"==typeof i&&i(!0))}if(d.A.isPushBlocked())return void this.Tn("Notifications from this site are blocked. This may be a temporary embargo or a permanent denial.",i);if(this.wt&&!this.wt.En()&&0===this.wt.li())return e.A.j.info("Waiting for VAPID key from server config before subscribing to push."),void this.wt.Rn(()=>{this.subscribe(n,i)});const h=()=>{e.A.j.info("Permission for push notifications was denied."),"function"==typeof i&&i(!1)},r=()=>{let t="Permission for push notifications was ignored.";d.A.isPushBlocked()&&(t+=" The browser has automatically blocked further permission requests for a period (probably 1 week)."),e.A.j.info(t),"function"==typeof i&&i(!0)},o=d.A.isPushPermissionGranted();this.requestPermission(()=>{!o&&this.hn&&this.hn.setPushNotificationSubscriptionType(w.A.NotificationSubscriptionTypes.OPTED_IN),this.In().then(t=>{if(null==t)return e.A.j.error("No service worker registration. Set the `manageServiceWorkerExternally` initialization option to false or ensure that your service worker is registered before calling registerPush."),void("function"==typeof i&&i(!0));t.pushManager.getSubscription().then(a=>{let s=null;if(this.wt&&null!=this.wt.En()&&(s=e.A.On.Fn(this.wt.En())),a){let c,y=null,A=null;if(this.u&&(c=this.u.v(P.d.k.Bn)),c&&!(0,v.cy)(c)){let b;try{b=j.A.Yn(c).Mn}catch{b=null}null==b||isNaN(b.getTime())||0===b.getTime()||(y=b,A=new Date(y),A.setMonth(y.getMonth()+6))}null!=s&&a.options&&a.options.applicationServerKey&&a.options.applicationServerKey.byteLength&&a.options.applicationServerKey.byteLength>0&&!(0,v.n4)(s,new Uint8Array(a.options.applicationServerKey))?(e.A.j.info(a.options.applicationServerKey.byteLength>12?"Device was already subscribed to push using a different VAPID provider, creating new subscription.":"Attempting to upgrade a gcm_sender_id-based push registration to VAPID - depending on the browser this may or may not result in the same gcm_sender_id-based subscription."),this.An(a,t,s,n,i)):a.expirationTime&&new Date(a.expirationTime).valueOf()<=(new Date).valueOf()?(e.A.j.info("Push subscription is expired, creating new subscription."),this.An(a,t,s,n,i)):c&&(0,v.cy)(c)?this.An(a,t,s,n,i):null==A?(e.A.j.info("No push subscription creation date found, creating new subscription."),this.An(a,t,s,n,i)):A.valueOf()<=(new Date).valueOf()?(e.A.j.info("Push subscription older than 6 months, creating new subscription."),this.An(a,t,s,n,i)):(e.A.j.info("Device already subscribed to push, sending existing subscription to backend."),this.Un(a,y,n))}else this.jn(t,s,n,i)}).catch(a=>{e.A.j.error("Error checking current push subscriptions: "+a)})}).catch(t=>{e.A.j.error("ServiceWorker registration failed: "+t)})},r,h)}else if(this.Pn){if(null==this.bn||""===this.bn)return e.A.j.error("You must supply the safariWebsitePushId initialization option in order to use registerPush on Safari"),void("function"==typeof i&&i(!0));const h=window.safari.pushNotification.permission(this.bn);this.zn(this.bn,h,n,i)}}unsubscribe(n,i){if(!d.A.isPushSupported())return e.A.j.info(g.qn),void("function"==typeof i&&i());this.vn?navigator.serviceWorker.getRegistration().then(h=>{h?h.pushManager.getSubscription().then(r=>{r&&(this.xn(),r.unsubscribe().then(o=>{o?(e.A.j.info("Device successfully unsubscribed from push."),"function"==typeof n&&n()):(e.A.j.error("Failed to unsubscribe device from push."),"function"==typeof i&&i()),this.Vn(h)}).catch(o=>{e.A.j.error("Push unsubscription error: "+o),"function"==typeof i&&i()}))}).catch(r=>{e.A.j.error("Error unsubscribing from push: "+r),"function"==typeof i&&i()}):(e.A.j.info("Device already unsubscribed from push."),"function"==typeof n&&n())}):this.Pn&&(this.xn(),e.A.j.info("Device unsubscribed from push."),"function"==typeof n&&n())}}return g.qn="Push notifications are not supported in this browser.",g})();const l={t:!1,i:null,m:()=>(l.o(),l.i||(l.i=new D(f.Ay.br(),f.Ay.Ma(),f.Ay.te(),f.Ay.Ys(),f.Ay.nn(f.lw._a),f.Ay.nn(f.lw.ka),f.Ay.tr(),f.Ay.nn(f.lw.qa),f.Ay.nn(f.lw.Aa),f.Ay.l())),l.i),o:()=>{l.t||(f.Ay.g(l),l.t=!0)},destroy:()=>{l.i=null,l.t=!1}},T=l}}]);